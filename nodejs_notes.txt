proxy=http://DEFENSE\vgon:Atowango11@dfsrvproxy3.intracomdefense.com:8080/
https-proxy=http://DEFENSE\vgon:Atowango11@dfsrvproxy3.intracomdefense.com:8080/
strict-ssl=false
registry=http://registry.npmjs.org

proxy settings
---------------
npm config set proxy http://dfsrvproxy1.intracomdefense.com:8080
npm config set https-proxy http://dfsrvproxy1.intracomdefense.com:8080


environment variables
------------------------
system path : C:\Program Files\nodejs\
user path : C:\Users\vgon\AppData\Roaming\npm
			C:\Users\vgon\AppData\Local\Programs\Microsoft VS Code\bin

visual studio code (in centos 7 https://linuxize.com/post/how-to-install-visual-studio-code-on-centos-7/)
node.js
nodejs modules intellisense 1.5.0 extension
npm intellisense 1.3.0 extension

typescript and javascript
Latest typescript and javascript grammar 0.0.53  microsoft  extension NOT INSTALLED
typescript hero 3.0.0


angular
Angular language service 0.900.9 extension
https://material.angular.io/components/categories    material components Angular


Derek Banas OO Javascript....very interesting from ECMA 5.1 downwards
double equals vs triple equals  (https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a he)


nodejs the right way
=====================
enable telnet in windows 10 -> run this (dism /online /Enable-Feature /FeatureName:TelnetClient)

npm init to make a package.json project file
npm show <package> version   (to show the version of an installed npm package)

npm start or node "name of main javascript file"  to start running a nodejs site

To test that the module was installed successfully, run this command:
$ node --harmony -p -e 'require("zmq")'

Express framework
npm install express --save
version 4.17.1

modules in Node.js (https://www.sitepoint.com/understanding-module-exports-exports-node-js/)


Angular Udemy
===================
Update npm
------------
Run [sudo] npm install -g npm  (sudo  is only required on Mac/ Linux)

Updating the CLI for Angular

[sudo] npm uninstall -g angular-cli @angular/cli 

npm cache clean 

[sudo] npm install -g @angular/cli

angular commands
-----------------
ng server (runs a project)
ng new <name> (builds a brand new project)
ng generate component <name> (generates a component automatically)
ng generate module app-routing --module app --flat  (generate a module without a subfolder using --flat)


my-dream-app   Section 1
-- 01_11 install bootstrap locally in the project  
npm install --save bootstrap@3   -> version 3
angular.json   -> to change the styles

-- 02_13 - 02_16 app_component.ts  is the main point...
build components (building block of an angular application) with their own html, styling, business logic etc.
A component is a class... We use export with the name of the class to be able to use this component
A decorator '@' is a class enrichment -> We transform the class into something else
	The selector is actually there as html tag
	The selector's name should be unique
	The templateUrl describes the html page
-- 02_17	
	Components are bundled into Modules(packages)
	For this tutorial we ll have only one module
	We have to declare the Component...ng does not parse the files automatically to find components etc.
	Typescript knows how to bundle .ts files so we dont have to include .ts at the imports
-- 02_19  alternative way of producting components using CLI & Nesting	
	etc.  ng generate component servers
-- 02_20 we can change the templateUrl to template in servers.component.ts file and put in there the contents
   of servers.component.html e.g. template: '<app-server></app-server><app-server></app-server>'
   We will have the same result as before
   All components MUST HAVE A TEMPLATE...they may not have selector or style
-- 02_21 just like the template we can have replace styleUrls with styles in order to put a style directly in here
-- 02-22 QUESTION ???? selector: '[app-servers]'   does not work
-- 02-30 $event contains the data related to the fired event
-- 02-35 Directives are instructions in the DOM
	Directives have selector. Components we could say are directives.
	Directives with template and without template
	Here, in this chapter we see built-in directives
-- 02-37 ngIf (it is a structural directive, it has a * in front of it) the DOM element may not be added in the DOM at all
-- 02-38 ngStyle (it is an attribute directive, they look like standard HTML elements)	
		[ngStyle] it is important to understand that in this case we bind to a property of a directive
-- 02-39 ngClass allows us to dynamically add/remove css classes. If a condition is valid then it adds a css class
		PROBLEM with ngClass...although it is not so important case
-- 02-40 ngFor (it is a structural directive)
project 01.11_bootstrap up to here


-- 03-46 download prj-start.zip	
-- 03-47 when running "ng generate component name" the app.module.ts file is updated automatically
											 --spec false for not producing a testing file	...spec.ts
		 the user may use a path to put the new component recipes/recipe-list

https://www.typescriptlang.org/docs/handbook/classes.html
https://www.techiediaries.com/angular-seo-title-and-meta-tags/
https://www.w3schools.com/bootstrap/bootstrap_list_groups.asp


-- 05 
-- 05-65 USEFUL Communication between components Introduction
-- 05-66 Implementation of 65 
	68 very good BUT PROBLEM with @Output (cannot see the buttons push to have results)
	Another example to play with (https://dzone.com/articles/understanding-output-and-eventemitter-in-angular)
-- 05 Encapsulation for views-css-templates
-- References of html elements can be used only in template parts and not in typescript
-- Hooks ngOnChanges etc.

-- 06-85 It actually shows a way for navigation without routing
-- 06-89 chance to use @Viewchild etc.

-- 07 Check it later
-- 08 Do it later

-- 09 Services and dependency injection
	It includes @output example as well  in "services-start" downloadable project BEFORE WE TOUCH for services
-- 09-107 This should be the starting point
-- 09-109 The type of angular dependency injection is Hierarchical injection
-- 09-110 IMPORTANTThe service is declared in three places, then we have three different instances and we see that UI is
	not updated correctly...We must only one instance of AccountService in app.component.ts
-- 09-111 Injecting a service into a service  @Injectable metadata is added as a descriptor in the class that wishes
		to use some other service. IN NEWER angular versions put @Injectable on top of every service
-- 09-112 cross component communication

-- 11 ROUTING !!!
-- 11-123 -> 127
	127 -> what to do to avoid loading application when pressing some link !!!!! (routerLink)
	129 -> style the active router link...special handle for the '/' root link
	130 -> how to navigate using a button etc.... inject Router into the constructor of the typescript class
	131 -> ActivatedRoute holds the currently activated route (relativeTo property). So inject the ActivatedRoute object
-- 11-132 -> Passing parameters
      133 -> Fetching parameters from URL 133 use ActivatedRoute again here. We use it to get url parameters.
      		See user.component.ts
      134 -> The 133 could break...how we solve this.... If we add one more link like "Anna" then when we press
      		this link the info wont load... Use of Observables because here we have an asynchronous task...
		Using the code this.route.params we listen to params changes
      135 -> behind the scenes Angular removes the subscription automatically. This section shows how
      		a manual destructor may be used.
      136 -> queryParams, fragment (servers.component.html) 	
      	     At the second half we do this programmatically	
      137 -> retrieve querys and fragments
      	     ActivatedRoute is used here as well (edit-server.component.ts)	
code written till here	     2020/02/05
      138 -> constructing dynamic links for navigation
      	Add code modifications here to be able to proceed to 139
      139  for child routes.....child routes....separate outlets are required
      140  code to go to editServer page VERY USEFUL because it adds code so that not to allow access to a user
      141  configuring and maintaining !!!! the queryparameters....queryParamsHandling
      		using the last minute of this video we can be sure that we use the last information on query parameters
      142  page not found case
      144 keep routing in a single module
      145 Guards not important
      146-147 Protecting routes with canActivate... A service for protecting routes  AuthGuard implements CanActivate interface
      		147 protect children
      149 CanDeactivate   protecting the user of accidentally go away a "page"	
      150 Error page that could be used by all components
      151 VERY VERY IMPORTANT !!! dynamically define if a page is to be displayed or not
      -152 in speed...      

-- 13 Observables (data sources coming from user actions, http requests etc. It is about asynchronous tasks that
we don't want to block our program). Observable and the Observer (our code). Observer handles data, error, completion.
Angular embraces Observables. It is offered by rxjs package
-- 13-171 closer look and initial example. When user leaves a component (e.g. a page) one more observables cease to exist.
We ngOnDestroy in .ts file of the component
-- 13-172 A custom observable
next() emits a value, error() an error, complete()  etc.

-- 15 HANDLING FORMS
-- 15-186 Submit form
-- 15-190 Validation

-- 18  HTTP REQUESTS
Setup Firebase
-- 18-256 in post example in import { map } the from is 'rxjs/operators' and not operator
	map function rewraps the data into an observable so that we are able to use it after PIPE
	After map we ll take a clean array of objects, instead of strange keys etc.
	... pulls out all key-value pairs from the nested object responseData[key], we use {} to make
	a new javascript object and finally we add an id:key to use the serial number automatically produced
	as id of the javascript object.
	The postsArray is used as input to .subscribe
-- 18-260 stuck here	

	
