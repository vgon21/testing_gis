...dots operator
https://www.freecodecamp.org/news/three-dots-operator-in-javascript/
https://stackoverflow.com/questions/56155922/how-to-delete-property-from-spread-operator

Socket disconnection examples
https://www.tabnine.com/code/javascript/functions/net/Socket/removeAllListeners

Promises async-await (good for loops)
https://lavrton.com/javascript-loops-how-to-handle-async-await-6252dd3c795/


proxy=http://DEFENSE\vgon:Atowango11@dfsrvproxy3.intracomdefense.com:8080/
https-proxy=http://DEFENSE\vgon:Atowango11@dfsrvproxy3.intracomdefense.com:8080/
strict-ssl=false
registry=http://registry.npmjs.org

proxy settings
---------------
npm config set proxy http://dfsrvproxy1.intracomdefense.com:8080
npm config set https-proxy http://dfsrvproxy1.intracomdefense.com:8080


environment variables
------------------------
system path : C:\Program Files\nodejs\
user path : C:\Users\vgon\AppData\Roaming\npm
			C:\Users\vgon\AppData\Local\Programs\Microsoft VS Code\bin

visual studio code (in centos 7 https://linuxize.com/post/how-to-install-visual-studio-code-on-centos-7/)
node.js
nodejs modules intellisense 1.5.0 extension
npm intellisense 1.3.0 extension

typescript and javascript
Latest typescript and javascript grammar 0.0.53  microsoft  extension NOT INSTALLED
typescript hero 3.0.0


angular
Angular language service 0.900.9 extension
https://material.angular.io/components/categories    material components Angular


Derek Banas OO Javascript....very interesting from ECMA 5.1 downwards
double equals vs triple equals  (https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a he)


JWT authentication
-------------------
JWT explanation and debugger to test various ways of producing a token (https://jwt.io/introduction/ )

nodejs the right way
=====================
enable telnet in windows 10 -> run this (dism /online /Enable-Feature /FeatureName:TelnetClient)

npm init to make a package.json project file
npm show <package> version   (to show the version of an installed npm package)

npm start or node "name of main javascript file"  to start running a nodejs site

To test that the module was installed successfully, run this command:
$ node --harmony -p -e 'require("zmq")'

Express framework
npm install express --save
version 4.17.1

modules in Node.js (https://www.sitepoint.com/understanding-module-exports-exports-node-js/)


Angular Udemy
===================
Update npm
------------
Run [sudo] npm install -g npm  (sudo  is only required on Mac/ Linux)


Updating the CLI for Angular

Run ng update @angular/core@8 @angular/cli@8  --allow-dirty
npm cache clean
Run ng update @angular/core @angular/cli  --allow-dirty

angular commands
-----------------
ng server (runs a project)
ng new <name> (builds a brand new project)
ng generate component <name> (generates a component automatically)
ng generate module app-routing --module app --flat  (generate a module without a subfolder using --flat)


my-dream-app   Section 1
-- 01_11 install bootstrap locally in the project  
npm install --save bootstrap@3   -> version 3
angular.json   -> to change the styles

-- 02_13 - 02_16 app_component.ts  is the main point...
build components (building block of an angular application) with their own html, styling, business logic etc.
A component is a class... We use export with the name of the class to be able to use this component
A decorator '@' is a class enrichment -> We transform the class into something else
	The selector is actually there as html tag
	The selector's name should be unique
	The templateUrl describes the html page
-- 02_17	
	Components are bundled into Modules(packages)
	For this tutorial we ll have only one module
	We have to declare the Component...ng does not parse the files automatically to find components etc.
	Typescript knows how to bundle .ts files so we dont have to include .ts at the imports
-- 02_19  alternative way of producting components using CLI & Nesting	
	etc.  ng generate component servers
-- 02_20 we can change the templateUrl to template in servers.component.ts file and put in there the contents
   of servers.component.html e.g. template: '<app-server></app-server><app-server></app-server>'
   We will have the same result as before
   All components MUST HAVE A TEMPLATE...they may not have selector or style
-- 02_21 just like the template we can have replace styleUrls with styles in order to put a style directly in here
-- 02-22 QUESTION ???? selector: '[app-servers]'   does not work
-- 02-25 String interpolation:  {{ data }}
-- 2-26 Property binding:		
	[property] = "data"
	property may be any property of an HTML element

	Event binding:			$event to pass data to a function
	(event) = "expression"
	e.g.(click)=function name in .ts
	All events in angular (or just html with ng-):
	https://www.w3schools.com/angular/angular_events.asp
-- 02-30 $event contains the data related to the fired event
-- 02-32 !!!! very important to listen e.g. to an input and fill a variable
			in .ts or update this variable and update input element value
		For two-way data binding Enable ngModel by importing FormsModule
		Instead of using Event binding we can use two-way data binding
		e.g. [(ngModel)]="..."
-- 02-35 Directives are instructions in the DOM
	Directives have selector. Components we could say are directives.
	Directives with template and without template
	Here, in this chapter we see built-in directives
-- 02-37 ngIf (it is a structural directive, it has a * in front of it) the DOM element may not be added in the DOM at all
-- 02-38 ngStyle (it is an attribute directive, they look like standard HTML elements)	
		[ngStyle] it is important to understand that in this case we bind to a property of a directive
-- 02-39 ngClass allows us to dynamically add/remove css classes. If a condition is valid then it adds a css class
		PROBLEM with ngClass...although it is not so important case
-- 02-40 ngFor (it is a structural directive)
project 01.11_bootstrap up to here


-- 03-46 download prj-start.zip	
-- 03-47 when running "ng generate component name" the app.module.ts file is updated automatically
											 --spec false for not producing a testing file	...spec.ts
		 the user may use a path to put the new component recipes/recipe-list

https://www.typescriptlang.org/docs/handbook/classes.html
https://www.techiediaries.com/angular-seo-title-and-meta-tags/
https://www.w3schools.com/bootstrap/bootstrap_list_groups.asp


-- 05 
-- 05-65 USEFUL Communication between components Introduction
-- 05-66 Implementation of 65 
	68 very good BUT PROBLEM with @Output (cannot see the buttons push to have results)
	Another example to play with (https://dzone.com/articles/understanding-output-and-eventemitter-in-angular)
-- 05-71,72 Encapsulation for views-css-templates USE encapsulation after header to avoid having component-specific names
		and apply CSS to other components as well
		Two-way binding good example: https://angular.io/guide/two-way-binding
-- References of html elements can be used only in template parts and not in typescript
-- Hooks ngOnChanges etc.

-- 06-85 It actually shows a way for navigation without routing
-- 06-89 chance to use @Viewchild etc.

-- 07 Check it later
-- 08 Do it later

-- 09 Services and dependency injection
	It includes @output example as well  in "services-start" downloadable project BEFORE WE TOUCH for services
-- 09-107 This should be the starting point
-- 09-109 The type of angular dependency injection is Hierarchical injection
-- 09-110 IMPORTANTThe service is declared in three places, then we have three different instances and we see that UI is
	not updated correctly...We must only one instance of AccountService in app.component.ts
-- 09-111 Injecting a service into a service  @Injectable metadata is added as a descriptor in the class that wishes
		to use some other service. IN NEWER angular versions put @Injectable on top of every service
-- 09-112 cross component communication

-- 11 ROUTING !!!
<base href="/">  in index.hml IMPORTANT
-- 11-123 -> 127
	126 -> Point to put directive <router-outlet></router-outlet> to display components
	127 -> what to do to avoid reloading application when pressing some link !!!!! (routerLink)
	128 -> explaining absolute and relative paths
	129 -> style the active router link...special handle for the '/' root link, to display it as not selected
		when it is not selected   routerLinkActive, routerLinkActiveOptions
	130 -> how to navigate using a button etc.... inject Router into the constructor of the typescript class
	131 -> ActivatedRoute holds the currently activated route (relativeTo property). So inject the ActivatedRoute object
		We can use navigate with relative path because navigate does not know the current, so it does not add something
		in front.
		{relativeTo:} can be used to include some path before
-- 11-132 -> Passing parameters e.g. /:id/:name
      133 -> Fetching parameters from URL 133 use ActivatedRoute again here. We use it to get url parameters to make a user.
      		from /:id/:name
      		See user.component.ts 
      134 -> IMPORTANT The 133 could break...how we solve this.... If we add one more link like "Anna" then when we press
      		this link the info wont load (because the component user is already loaded)... Use of Observable (e.g. params) because here we have an asynchronous task...
		Using the code this.route.params we listen to params changes
      135 -> behind the scenes Angular removes the subscription automatically. This section shows how
      		a manual destructor may be used. Subscription to updated URL parameters ITIS NOT necessary to put
		a destructor...no need for Subscription here...observable as it was used initially will be destructed
		when component is destructed.  QUESTION on ngONInit this.user = {...}
      136 -> queryParams, fragment (servers.component.html) 	
      	     At the second half we do this programmatically	
      137 -> retrieve querys and fragments
      	     ActivatedRoute is used here as well (edit-server.component.ts)	
code written till here	     2020/02/05
      138 -> constructing dynamic links for navigation
      	Add code modifications here to be able to proceed to 139
      139  for child routes.....child routes....separate outlets are required
      140  code to go to editServer page VERY USEFUL because it adds code so that NOT TO ALLOW access to a user
      141  configuring and maintaining !!!! the queryparameters....queryParamsHandling  PRESERVE | MERGE params
      		using the last minute of this video we can be sure that we use the last information on query parameters
      142  page not found case
      144 keep routing in a single module
      145 Guards not important
      146-147 Protecting routes with canActivate Guard... A service for protecting routes  AuthGuard implements CanActivate interface
      		147 protect children
      149 CanDeactivate type of Guard  protecting the user of accidentally go away from a "page"	
      150 Error page that could be used by all components
      151 VERY VERY IMPORTANT !!! dynamically define if a page is to be displayed or not
      -152 ...      

-- 13 Observables (data sources coming from user actions, http requests etc. It is about asynchronous tasks that
we don't want to block our program). Observable and the Observer (our code). Observer handles data, error, completion.
Angular embraces Observables. It is offered by rxjs package
-- 13-171 closer look and initial example. When user leaves a component (e.g. a page) one more observables cease to exist.
We ngOnDestroy in .ts file of the component
-- 13-172 A custom observable
next() emits a value, error() an error, complete()  etc.
-- 13-175 IMPORTANT we use pipes and in there we can use operators (to transform data before we get them) like map(...)
    You can build a chain of steps....e.g. first use filter(...) operators and then map(...) The example is there	
-- 13-176 replace service-eventEmitter-subscribe with Subject
	Just make sure that a subscription is there and ngOnDestroy to unsubscribe from subscription
-- 13-177 Operators on observables... observable.pipe() Eveyr objervable has a pipe method

-- 15 HANDLING FORMS
-- 15-185 use of ngModel like two-way data binding example... We have a javascript representation of the form
-- 15-186 Submit form   
	use of ngModel to name elements the Angular way
	use of ngSubmit for the default behaviour of the form, ngForm to take the javascript object of the form
	HTMLFormElement instead of ElementRef
	ngForm  it tells Angular to give programmer access to the form(javscript object) Angular created automatically
-- 15-187 Nothing important just the properties of a form object (javascript object) Use "ngModel" to mark an element to 
	be recognizable by Angular
-- 15-188 Access to ngForm without passing it as parameter in onSubmit. Using @ViewChild
-- 15-189 Validation 
-- 15-190 Validation builtin validators that Angular provides
-- 15-191 Form state  disable submit button see app.component.css
-- 15-192 Outputing Validation messages  use ngModel in the template e.g. #email="ngModel"  Very good example !!!
-- 15-193 Default values for fields  property binding(one way binding)
-- 15-194 two way binding
-- 15-195 Group form controls using    ngModelGroup
-- 15-196 Radio buttons
-- 15-197 Setting and patching values in Forms  suggestUserName(). 
	setValue sets all form's values
	Use patch to avoid overwrite fields that are already filled.
-- 15-198 Take the form values and store them in an array json...
For the compilation error https://stackoverflow.com/questions/56704164/angular-viewchild-error-expected-2-arguments-but-got-1
@ViewChild('h', {static: false}) signupForm: NgForm;  //put this instead of that of the tutorial
-- 15-199 Reset the form or reset it passing an array to fill fields with specific values	


-- 18  HTTP REQUESTS
-- 18-252 Post, put, patch requests have a BODY
-- 18-253 Setup Firebase
-- 18-254 HttpClientModule module is used in app.module.ts to be able to use throughout the project
	Inject httpclient in constructor of our component
	POST request how to.   If no subscription then no post is executed...since Angular understands that
	the client is not interested in the response.
-- 18-255 GET simple request	
-- 18-256 transform response data.transform response datain post example in import { map } the from is 'rxjs/operators' 
	and not operator
	map function rewraps the data into an observable so that we are able to use it after PIPE
	After map we ll take a clean array of objects, instead of strange keys etc.
	... pulls out all key-value pairs from the nested object responseData[key], we use {} to make
	a new javascript object and finally we add an id:key to use the serial number automatically produced
	as id of the javascript object.
	The postsArray is used as input to .subscribe
-- 18-257 GET and POST with type description of the data to be transferred
-- 18-258 load the posts and show them on screen	
-- 18-259 show loading indicator
-- 18-260 stuck here	
-- 18-261 service and component working together. If we transfer the http in the service then we have
	to return the whole GET/POST as a result-observable and then in the app.component.ts to subscribe to the results
-- 18-262 DELETE
-- 18-263 handling errors using and rules from Firebase
-- 18-264 using Subject for some error cases
-- 18-265 another catchError mechanism
-- 18-266
			2nd part of this module
-- 18-267 set headers If we want something custom HttpHeaders
-- 18-268 add query params	HttpParams  Use this to easily enrich the url with parameter values
-- 18-269 different types of responses
-- 18-270 change the response body TYPE  observe: response/events etc. The DEFAULT type of the response is JSON
-- 18-271 IMPORTANT Interceptοr before the request leaves the application. The "next" parameter of implemented "intercept" 		function forwards the request to let it continue its journey
-- 18-272 Modify the request object...e.g. append 
	headers in existing headers REQUEST INTERCEPTOR
-- 18-273 RESPONSE INTERCEPTOR
-- 18-274 Multiple interceptor...It is very IMPORTANT to put them in the right order in PROVIDERS in app.module.ts

Dynamic component   loaded programmtically...
-- 21-311 how to close an alert the right way

-- 25 (NgRx Redux)
	Think of it like a large data store object
	NgRx is Angular implementation of Redux
	
-- 25-355  In order to update the State by a component an Action must be dispatched containing the type
		and the payload
	The action does not arrive directly to the store...it goes through Reducer
	The Reducer checks the type and then it updated the state in an IMMUTABLE way...that is it first
	copies current data and then updates it. That is the reduced state is stored in the Store.
	
	
	
	

	
